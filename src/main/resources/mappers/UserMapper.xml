<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.butler.server.model.mapper.UserMapper">

    <!-- 유저 생성 -->
    <insert id="insertUserXml" parameterType="com.butler.server.model.entities.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (name, email) VALUES (#{name}, #{email})
    </insert>

    <!-- 유저 조회 (ID로 조회) -->
    <select id="selectUserByIdXml" parameterType="long" resultType="com.butler.server.model.entities.User">
        SELECT * FROM user WHERE id = #{id}
    </select>

    <!-- 모든 유저 조회 -->
    <select id="selectAllUsersXml" resultType="com.butler.server.model.entities.User">
        SELECT * FROM user
    </select>

    <!-- 유저 업데이트 -->
    <update id="updateUserXml" parameterType="com.butler.server.model.entities.User">
        UPDATE user SET name = #{name}, email = #{email} WHERE id = #{id}
    </update>

    <!-- 유저 삭제 -->
    <delete id="deleteUserXml" parameterType="long">
        DELETE FROM user WHERE id = #{id}
    </delete>

</mapper>
<!--
1. xml로 mapper 구현하는 예시를 보여주기 위해 작성된 파일입니다.
2. 예제를 위해 CRUD를 사용하였지만 CRUD와 같이 기본적이 쿼리문은 JPA로 구현하면 됩니다.
3. mybatis의 기능들은 대부분 .java 파일로도 구현가능합니다.
4. 하지만 몇몇 기능들은 가독성 또는 구현이 .xml 파일이 간편하기 때문에 .java, .xml 상황에 맞게 사용하는 것이 좋습니다.
5. JPA, MyBatis 사용 가이드는 프로젝트에 포함된 JPA_MyBatis_Functions.md 파일을 참고해주세요.
6. .md파일을 Visual Studio Code에서 확인할 때 Ctrl+Shift+v 단축키로 preview 확인 가능합니다.
(Mac에서는 Ctrl을 Command로 대체)
-->